# program template for Spaceship
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
time = 0
started = False

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)


# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        
    def set_thrust(self, on):
        self.thrust = on
        if on:
            ship_thrust_sound.play()
        else:
            ship_thrust_sound.pause()
            ship_thrust_sound.rewind()

    def angle_vel_increase(self):
        self.angle_vel += 0.075
        
    def angle_vel_decrease(self):
        self.angle_vel -= 0.075
          
    def shoot(self):
        return Sprite([self.pos[0] + (self.image_size[0] / 2) * angle_to_vector(self.angle)[0] , self.pos[1] + (self.image_size[1] / 2) * angle_to_vector(self.angle)[1]], [self.vel[0] + 5 * angle_to_vector(self.angle)[0], self.vel[1] + 5 * angle_to_vector(self.angle)[1]], 0, 0, missile_image, missile_info, missile_sound)
    
    def draw(self,canvas):
        #canvas.draw_circle(self.pos, self.radius, 1, "White", "White")
        if self.thrust:
            canvas.draw_image(self.image, [self.image_center[0] + self.image_size[0], self.image_center[1]], self.image_size,self.pos,self.image_size,self.angle)
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size,self.pos,self.image_size,self.angle)
            
            
    def update(self):       
        self.angle += self.angle_vel
        forward_vector = angle_to_vector(self.angle)
        if self.thrust:
            self.vel[0] += 0.4 * forward_vector[0]
            self.vel[1] += 0.4 * forward_vector[1]
        self.vel[0] = 0.95 * self.vel[0] 
        self.vel[1] = 0.95 * self.vel[1] 
               
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
        
        if self.pos[0] > WIDTH:
            self.pos[0] = self.pos[0] % WIDTH
        if self.pos[1] > HEIGHT:
            self.pos[1] = self.pos[1] % HEIGHT
        if self.pos[0] < 0 :
            self.pos[0] = self.pos[0] % WIDTH
        if self.pos[1] < 0 :
            self.pos[1] = self.pos[1] % HEIGHT
        
    
        
    
        
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
   
    def draw(self, canvas):
        if self.animated:
            canvas.draw_image(self.image, (self.image_center[0] + (self.age * self.image_size[0]), self.image_center[1]), self.image_size, self.pos, self.image_size, self.angle)
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
    
    def update(self):
        self.angle += self.angle_vel      
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        self.age += 1
        if self.age < self.lifespan:
            return False
        else:
            return True
    
    def collide(self, other_object):
        radius1 = self.radius
        radius2 = other_object.radius
        center1 = self.pos
        center2 = other_object.pos
        if dist(center1, center2) <= (radius1 + radius2):
            return True
        else:
            return False
        

#Key handlers
def keydown(key):
    global missile_group
    if started:
        if key == simplegui.KEY_MAP["left"]:
            my_ship.angle_vel_decrease()
        elif key == simplegui.KEY_MAP["right"]:
            my_ship.angle_vel_increase()
        if key == simplegui.KEY_MAP["up"]:
            my_ship.set_thrust(True)
        if key == simplegui.KEY_MAP["space"]:
            missile_group.add(my_ship.shoot())
            
    
def keyup(key):
    if started:
        if key == simplegui.KEY_MAP["left"]:
            my_ship.angle_vel_increase()
        if key == simplegui.KEY_MAP["right"]:
            my_ship.angle_vel_decrease()
        if key == simplegui.KEY_MAP["up"]:
            my_ship.set_thrust(False)

# Helper function for drawing and updating group of sprites
def process_sprite_group(canvas,group):
    for each_sprite in list(group):
        each_sprite.draw(canvas)
        if each_sprite.update():
            group.remove(each_sprite)
        
# Group collide function

def group_collide(group, other_object):
    global explosion_group
    count = 0
    for each_element in list(group):
        if each_element.collide(other_object):
            explosion_group.add(Sprite(other_object.pos, [0,0], 0, 0, explosion_image, explosion_info, explosion_sound))
            group.remove(each_element)
            count += 1
    if count >0:
        return True
    else:
        return False

def group_group_collide(group_a, group_b):
    global score
    for each_element in list(group_a):
        if group_collide(group_b, each_element):
            group_a.remove(each_element)
            score += 1
            
         
# mouseclick handlers that reset UI and conditions whether splash image is drawn
def click(pos):
    global started
    center = [WIDTH / 2, HEIGHT / 2]
    size = splash_info.get_size()
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    if (not started) and inwidth and inheight:
        started = True    
        soundtrack.pause()
    
def draw(canvas):
    global time, started, lives, a_group, explosion_group, missile_group
    
    # animiate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_text("Lives",[50,50], 20, "White")
    canvas.draw_text(str(lives),[50,70], 20, "White")
    canvas.draw_text("Score",[700,50], 20, "White")
    canvas.draw_text(str(score),[700,70], 20, "White")
    # draw ship and sprites
    my_ship.draw(canvas)
    #a_rock.draw(canvas)
    process_sprite_group(canvas, a_group)
    #a_missile.draw(canvas)
    process_sprite_group(canvas, missile_group)
    process_sprite_group(canvas, explosion_group)
    # update ship and sprites
    my_ship.update()
    # draw splash screen if not started
    if not started:
        canvas.draw_image(splash_image, splash_info.get_center(),splash_info.get_size(), [WIDTH / 2, HEIGHT / 2],splash_info.get_size())
    if group_collide(a_group, my_ship):
        lives -= 1
    group_group_collide(a_group, missile_group)
    if lives <= 0:
        reset_game()
        
def reset_game():
    global a_group, started, my_ship, missile_group, lives, score, explosion_group
    a_group = set([])
    started = False
    my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)
    missile_group = set([])
    explosion_group = set([])
    lives = 3
    score = 0
    soundtrack.rewind()
    soundtrack.play()
    ship_thrust_sound.pause()
                
# timer handler that spawns a rock    
def rock_spawner():
    global a_group
    if score < 10:
        spawn_vel = [0.1 * random.randrange(1,6), 0.1 * random.randrange(1,6)]
    elif score < 30:
        spawn_vel = [0.3 * random.randrange(1,6), 0.3 * random.randrange(1,6)]
    elif score < 40:
        spawn_vel = [0.4 * random.randrange(1,6), 0.4 * random.randrange(1,6)]
    elif score < 50:
        spawn_vel = [0.5 * random.randrange(1,6), 0.5 * random.randrange(1,6)]
    else:
        spawn_vel = [0.6 * random.randrange(1,6), 0.6 * random.randrange(1,6)]
    
    spawn_width = random.randrange(0, WIDTH)
    spawn_height = random.randrange(0, HEIGHT)
    if dist([spawn_width, spawn_height], my_ship.pos) <= (asteroid_info.get_radius() + my_ship.radius + 100):
        spawn_width += 300
        spawn_height += 300
        
    spawn_ang_vel = 0.025 * random.randrange(1,6)
    if len(a_group)<= 12 and started:
        if random.randint(0,2) == 1:
            spawn_vel[0] *= -1
        if random.randint(0,2) == 1:
            spawn_vel[1] *= -1
        if random.randint(0,2) == 1:
            spawn_ang_vel *= -1
        a_rock = Sprite([spawn_width, spawn_height], spawn_vel, 0, spawn_ang_vel, asteroid_image, asteroid_info)
        a_group.add(a_rock)
    
  
# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship and two sprites
reset_game()
# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_mouseclick_handler(click)

timer = simplegui.create_timer(1000.0, rock_spawner)

# get things rolling
timer.start()
frame.start()

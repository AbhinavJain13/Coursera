# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.hand = []

    def __str__(self):
        s = "Hand contains"
        for i in self.hand:
                s = s + " " + str(str(i))
        return s
    
    def add_card(self, card):
        self.hand.append(card)

    def get_value(self):
        hand_value = 0
        aces = "FALSE"
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        for i in self.hand:
            hand_value = hand_value + VALUES[str(i.get_rank())]
            if str(i.get_rank()) == "A":
                aces = "TRUE"
        if aces == "FALSE":
            return hand_value
        elif hand_value + 10 <= 21:
            return hand_value + 10
        else:
            return hand_value
   
    def draw(self, canvas, pos):
        hand_pos_counter = 0
        for i in self.hand:
            i.draw(canvas,[(pos[0] + hand_pos_counter * 80) , pos[1]])
            hand_pos_counter += 1
 
 
            
# define deck class 
class Deck:
    def __init__(self):
        self.deck_card = []
        for i in SUITS:
            for j in RANKS:
                value = Card(i,j)
                self.deck_card.append(value)
                
    # shuffle the deck 
    def shuffle(self):
        random.shuffle(self.deck_card)
    
    # Deal a card
    def deal_card(self):
        return self.deck_card.pop()
    
    # Print deck
    def __str__(self):
        s = "Deck contains"
        for i in self.deck_card:
            s = s + " " + str(i)
        return s



#define event handlers for buttons
def deal():
    global outcome, in_play, player_hand, dealer_hand, deck_in_play, score
    # your code goes here
    deck_in_play = Deck()
    deck_in_play.shuffle()
    player_hand = Hand()
    player_hand.add_card(deck_in_play.deal_card())
    player_hand.add_card(deck_in_play.deal_card())
    dealer_hand = Hand()
    dealer_hand.add_card(deck_in_play.deal_card())
    dealer_hand.add_card(deck_in_play.deal_card())
    if in_play:
        outcome = "You lose"
        score -= 1
    else:
        in_play = True
        outcome = ""
    
def hit():
    global player_hand, in_play, dealer_hand, outcome, score
    # if the hand is in play, hit the player
    if player_hand.get_value() <= 21 and in_play:
        player_hand.add_card(deck_in_play.deal_card())
          
    # if busted, assign a message to outcome, update in_play and score
    if player_hand.get_value() > 21 and in_play:
        outcome = "You went bust and lose!"
        score -= 1 
        in_play = False
        
def stand():
    global player_hand, dealer_hand, deck_in_play, in_play, outcome, score
    if player_hand.get_value() > 21:
        outcome = "You went bust and lose!"
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    else:
        if in_play:
            while dealer_hand.get_value() < 17:
                dealer_hand.add_card(deck_in_play.deal_card())
        # assign a message to outcome, update in_play and score
        if dealer_hand.get_value() > 21:
            outcome = "Dealer busted. You win!"
            score += 1
        elif dealer_hand.get_value() >= player_hand.get_value():
            outcome = "You lose"
            score -= 1
        else:
            outcome = "You win!"
            score += 1
    in_play = False

def reset():
    global score, in_play
    score = 0
    outcome = ""
    in_play = False
    deal()
# draw handler    
def draw(canvas):
    canvas.draw_text("Blackjack",[110,100], 50, "Cyan")
    canvas.draw_text("Score: " + str(score),[400,100], 30, "Black")
    canvas.draw_text("Dealer",[50,170], 30, "Black")
    canvas.draw_text("Player",[50,370], 30, "Black")
    if in_play:
        canvas.draw_text("Hit or Stand",[250,370], 30, "Black")
    else:
        canvas.draw_text("New deal?", [250,370], 30, "Black")
    player_hand.draw(canvas,[50,400])
    dealer_hand.draw(canvas,[50,200])
    if in_play:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [50 + CARD_BACK_CENTER[0] ,200 + CARD_BACK_CENTER[1]], CARD_SIZE)
    canvas.draw_text(outcome,[250, 170],30,"Black")
    
# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.add_button("Reset", reset, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric
